import pgzrun
import random
import time

WIDTH = 800
HEIGHT = 600

# Game states: "start", "playing", "gameover"
game_state = "start"
start_time = 0
game_duration = 20  # seconds

# Actors (players)
catcher = Actor("positive_alien", (100, 300))  # Use arrow keys
runner = Actor("negative_alien", (700, 300))   # Use WASD

# Random object generator with index using list of tuples
def generate_objects():
    return [(i, Actor("lifeguard_zombie", (random.randint(100, 700), random.randint(100, 500)))) for i in range(5)]

objects = generate_objects()

# Movement speed
speed = 5

def draw():
    screen.clear()

    if game_state == "start":
        screen.draw.text("Press SPACE to Start", center=(WIDTH // 2, HEIGHT // 2), fontsize=50)

    elif game_state == "playing":
        catcher.draw()
        runner.draw()

        for index, obj in objects:
            obj.draw()

        remaining_time = max(0, game_duration - int(time.time() - start_time))
        screen.draw.text(f"Time Left: {remaining_time}s", topleft=(10, 10), fontsize=40)

    elif game_state == "gameover":
        screen.draw.text("Game Over!", center=(WIDTH // 2, HEIGHT // 2 - 30), fontsize=60)
        screen.draw.text("Press R to Restart", center=(WIDTH // 2, HEIGHT // 2 + 30), fontsize=40)

def update():
    global game_state

    if game_state == "playing":
        move_players()

        if catcher.colliderect(runner):
            game_over()

        if time.time() - start_time > game_duration:
            game_over()

def move_players():
    # Runner (WASD)
    if keyboard.w:
        runner.y -= speed
    if keyboard.s:
        runner.y += speed
    if keyboard.a:
        runner.x -= speed
    if keyboard.d:
        runner.x += speed

    # Catcher (Arrow keys)
    if keyboard.up:
        catcher.y -= speed
    if keyboard.down:
        catcher.y += speed
    if keyboard.left:
        catcher.x -= speed
    if keyboard.right:
        catcher.x += speed

def on_key_down(key):
    global game_state, start_time

    if key == keys.SPACE and game_state == "start":
        game_state = "playing"
        start_time = time.time()

    elif key == keys.R and game_state == "gameover":
        reset_game()

def game_over():
    global game_state
    game_state = "gameover"

def reset_game():
    global catcher, runner, objects, game_state
    catcher.pos = (100, 300)
    runner.pos = (700, 300)
    objects=generate_objects()
    game_state = "start"

pgzrun.go()